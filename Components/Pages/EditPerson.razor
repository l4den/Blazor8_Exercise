@page "/edit-person"
@page "/edit-person/{id:int}"


@inject NavigationManager NavigationManager
@inject PeopleClient Client
@inject ExperiencesClient ExperienceClient


<PageTitle>@title</PageTitle>

<h3 class="mt-3">@title</h3>
<hr>

@if ( person is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <EditForm Model="@person" FormName="editPerson" OnValidSubmit="HandleSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="embg">Embg:</label>
                    <InputText id="embg" @bind-Value="person.Embg" class="form-control" />
                    <ValidationMessage For="() => person.Embg"/>
                    <p style="color: red; font-weight: 400">@embgError</p>
                </div>
                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText id="name" @bind-Value="person.Name" class="form-control" />
                    <ValidationMessage For="() => person.Name"/>
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name:</label>
                    <InputText id="lastName" @bind-Value="person.LastName" class="form-control" />
                    <ValidationMessage For="() => person.LastName"/>
                </div>
                <div class="form-group">
                    <label for="address">Address:</label>
                    <InputText id="address" @bind-Value="person.Address" class="form-control" />
                    <ValidationMessage For="() => person.Address"/>
                </div>
                <div class="mb-2"></div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
    @if(experiences is not null && experiences.Length > 0)
    {
        <hr>
        <h3 class="mt-3">@person.Name @person.LastName's experiences:</h3>
        <table class="table table-striped table-bordered table-hover mt-3">
            <thead class="table-dark">
                <th>Company Name</th>
                <th>Position</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </thead>
            <tbody>
                @foreach (var exp in experiences)
                {
                    <tr>
                        <td>@exp.CompanyName</td>
                        <td>@exp.Position</td>
                        <td>@exp.StartDate.ToString("dd/MM/yyyy")</td>
                        <td>@exp.EndDate.ToString("dd/MM/yyyy")</td>
                        <td>
                            <div class="d-flex">
                                <a class="btn btn-primary" 
                                    role="button" 
                                    href="@ExperienceUrl(exp.Id, person.Id)"
                                    style="margin-right: 5%;">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button class="btn btn-danger" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="@GetDeleteModalId(exp)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                            <DeleteExperience Experience="@exp" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if(person.Id != 0){
        <hr>
        <a role="button" class="btn btn-primary" href="/edit-experience?personId=@person.Id">Add Experience</a>
    }
}

@code {
    [Parameter]
    public int? Id {get; set;}

    [SupplyParameterFromForm]
    private Person? person {get; set;}

    private Experience[]? experiences;

    private string title = "Add Person";

    private string embgError = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        if(person is not null)
        {
            return;
        }

        if(Id is not null)
        {
            person = await Client.GetPersonAsync(Id.Value);
            title = $"Edit {person.Name} {person.LastName}'s info:";
            experiences = await ExperienceClient.GetExperiencesByPersonIdAsync(person.Id);
        }
        else
        {
            experiences = null;
            person = new()
            {
                Embg = string.Empty,
                Name = string.Empty,
                LastName = string.Empty,
                Address = string.Empty,
            };

            title = "Add Person";
        }
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(person);

        bool embgExists = await Client.EmbgExistsAsync(person.Embg);

        if(!embgExists)
        {
            embgError = "";
            if(Id is null)
            {
                await Client.AddPersonAsync(person);
            }
            else
            {
                person.Id = Id.Value;
                await Client.UpdatePersonAsync(person);
            }
            NavigationManager.NavigateTo("/");
        }
        else
        {
            embgError = $"An entry for '{person.Embg}' already exists within this table";
        }
    }

    private static string ExperienceUrl(int id, int personId) => $"/edit-experience/{id}?personId={personId}";

    private string GetDeleteModalId(Experience experience)
    {
        return $"#{DeleteExperience.GetModalId(experience)}";
    }

}
