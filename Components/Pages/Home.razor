@page "/"
@inject PeopleClient Client
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>People Catalog</PageTitle>

<div class="mt-3 mb-3">
    <a class="btn btn-primary" role="button" href="/edit-person">Add Person</a>
</div>

@if(people is null)
{
    <p><em>Loading...</em></p>
    <span>Total rows = @totalRows</span>
    <span>@query</span>
}
else
{
    <div>
        <input type="text" @bind="@searchWord" >
        <input type="button" class="btn btn-secondary" value="Search" @onclick="SearchTable">
    </div>
    <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
            <th>
                <button style="
                               width: 100%;
                               border: none;
                               color: white;
                               font-weight: bold;"
                               
                        type="button"
                        >Id</button>
            </th>
            <th>
                <button style="
                               width: 100%;
                               border: none;
                               color: white;
                               font-weight: bold;"
                        type="button"
                        @onclick="SortEmbg"
                        >Embg
                        @if(sortBy == "Embg"){
                            @if(isDescending == false){
                                <i class="bi bi-arrow-up"></i>
                            }else{
                                <i class="bi bi-arrow-down"></i>
                            }
                        }
                </button>
                        
            </th>
            <th>
                <button style="
                               width: 100%;
                               border: none;
                               color: white;
                               font-weight: bold;"
                               
                        type="button"
                        @onclick="SortName"
                        >Name
                        @if(sortBy == "Name"){
                            @if(isDescending == false){
                                <i class="bi bi-arrow-up"></i>
                            }else{
                                <i class="bi bi-arrow-down"></i>
                            }
                        }
                </button>
            </th>
            <th>
                <button style="
                               width: 100%;
                               border: none;
                               color: white;
                               font-weight: bold;"
                               
                        type="button"
                        @onclick="SortLastName"
                        >Surname
                        @if(sortBy == "LastName"){
                            @if(isDescending == false){
                                <i class="bi bi-arrow-up"></i>
                            }else{
                                <i class="bi bi-arrow-down"></i>
                            }
                        }
                </button>
            </th>
            <th>
                <button style="
                               width: 100%;
                               border: none;
                               color: white;
                               font-weight: bold;"
                               
                        type="button"
                        @onclick="SortAddress"
                        >Address
                        @if(sortBy == "Address"){
                            @if(isDescending == false){
                                <i class="bi bi-arrow-up"></i>
                            }else{
                                <i class="bi bi-arrow-down"></i>
                            }
                        }
                </button>
            </th>
            <th>
                <button style="
                               width: 100%;
                               border: none;
                               color: white;
                               font-weight: bold;"
                               
                        type="button"
                        >Actions</button>
            </th>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.Embg</td>
                    <td>@person.Name</td>
                    <td>@person.LastName</td>
                    <td>@person.Address</td>
                    <td>
                        <div class="d-flex">
                            <a class="btn btn-primary" 
                               role="button" 
                               href="@PersonUrl(person.Id)"
                               style="margin-right: 5%;">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="@GetDeleteModalId(person)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <DeletePerson Person="@person"/>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <input type="button" 
               class="btn btn-secondary" 
               id="prev" 
               value="Previous Page"
               disabled="@DisablePreviousPageButton()"
               @onclick="PreviousPage">
        @for(int i = currentPage - 1; i<currentPage + 2; i++)
        {   
            int j = i;
            @if(i > 0 && (totalRows - pageSize*(i-1)) > 0){
                @if(i == currentPage)
                {
                    <span class="px-2" style="font-weight: bold; cursor: pointer;" @onclick="() => ShowPage(j)">@i</span>
                }
                else
                {
                    <span class="px-2" style="cursor: pointer;" @onclick="() => ShowPage(j)">@i</span>
                }
            }
        }
        <input type="button" 
               class="btn btn-secondary" 
               id="next" 
               value="Next Page"
               disabled="@DisableNextPageButton()"
               @onclick="NextPage">
    </div>
    <div class="mt-3">
        <p>Showing 
            <span style="font-weight: bold;">@people.Count()</span> 
            of 
            <span style="font-weight: bold;">@totalRows</span> entries</p>
    </div>
    <hr>
    <h4>Download as:</h4>
    <div>
        <button class="btn btn-primary"
                @onclick="@(async () => await DownloadXlxs())">.XLXS</button>

        <button class="btn btn-primary"
                @onclick="@(async () => await DownloadPdf())">.PDF</button>

        <button class="btn btn-primary"
                @onclick="@(async () => await DownloadCsv())">.CSV</button>
    </div>
    <script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
    </script>
}

@code{
    private Person[]? people;

    // PAGINATION VARIABLES
    private int currentPage = 1;
    private int pageSize = 4;
    private int totalRows = 0;

    // SEARCH
    private string? searchWord;

    // SORTING VARIABLES
    private string? sortBy;
    private bool isDescending = false;
    
    // QUERY PARAMS
    private string query = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    protected async Task ShowPage()
    {
        query = $"?PageNumber={currentPage}&PageSize={pageSize}&IsDescending={isDescending}";

        if( sortBy != null )
        {
            query += $"&SortBy={sortBy}";
        }

        if ( searchWord != null)
        {
            query += $"&SearchWord={searchWord}";
        }

        (people, totalRows) = await Client.GetPeopleAsync(query);
    }

    protected async Task SearchTable()
    {
        await ShowPage();
    }

    protected async Task ShowPage(int pageNum)
    {
        currentPage = pageNum;
        query = $"?PageNumber={currentPage}&PageSize={pageSize}&IsDescending={isDescending}";

        if( sortBy != null )
        {
            query += $"&SortBy={sortBy}";
        }

        if ( searchWord != null)
        {
            query += $"&SearchWord={searchWord}";
        }
        (people, totalRows) = await Client.GetPeopleAsync(query);
    }

    // PAGINATION
    private async Task NextPage()
    {
        if(totalRows - pageSize*currentPage > 0){
            currentPage++;
            await ShowPage();
        }
    }

    private async Task PreviousPage()
    {
        if(currentPage > 1)
        {
            currentPage--;
            await ShowPage();
        }
    }

    private bool DisablePreviousPageButton()
    {
        return currentPage == 1;
    }

    private bool DisableNextPageButton()
    {
        return totalRows - pageSize*currentPage <= 0;
    }
    
    // EDIT and DELETE URLS
    private static string PersonUrl(int id) => $"/edit-person/{id}";

    private string GetDeleteModalId(Person person)
    {
        return $"#{DeletePerson.GetModalId(person)}";
    }

    // TABLE SORTING
    private int clickEmbg = 0;
    private int clickName = 0;
    private int clickSurname = 0;
    private int clickAddress = 0;

    private async Task SortEmbg()
    {
        clickEmbg += 1;
        clickName = 0;
        clickAddress = 0;
        clickSurname = 0;

        sortBy = "Embg";
        isDescending = (clickEmbg % 2 == 0) ? true : false;
        await ShowPage();
    }

    private async Task SortName()
    {
        clickEmbg = 0;
        clickName += 1;
        clickAddress = 0;
        clickSurname = 0;

        sortBy = "Name";
        isDescending = (clickName % 2 == 0) ? true : false;
        await ShowPage();
    }

    private async Task SortLastName()
    {
        clickEmbg = 0;
        clickName = 0;
        clickAddress = 0;
        clickSurname += 1;

        sortBy = "LastName";
        isDescending = (clickSurname % 2 == 0) ? true : false;
        await ShowPage();
    }

    private async Task SortAddress()
    {
        clickEmbg = 0;
        clickName = 0;
        clickAddress += 1;
        clickSurname = 0;

        sortBy = "Address";
        isDescending = (clickAddress % 2 == 0) ? true : false;
        await ShowPage();
    }

    /// EXPORTS
    private async Task DownloadCsv()
    {
        query = $"?SortBy={sortBy}&IsDescending={isDescending}&SearchWord={searchWord}";
        byte[] fileBytes = await Client.GetCsvFileBytesAsync(query);

        using var memoryStream = new MemoryStream(fileBytes);
        using var streamRef = new DotNetStreamReference(stream: memoryStream);

        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "all_people.csv", streamRef);
    }

    private async Task DownloadPdf()
    {
        query = $"?SortBy={sortBy}&IsDescending={isDescending}&SearchWord={searchWord}";
        byte[] fileBytes = await Client.GetPdfFileBytesAsync(query);

        using var memoryStream = new MemoryStream(fileBytes);
        using var streamRef = new DotNetStreamReference(stream: memoryStream);

        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "all_people.pdf", streamRef);
    }

    private async Task DownloadXlxs()
    {
        query = $"?SortBy={sortBy}&IsDescending={isDescending}&SearchWord={searchWord}";
        byte[] fileBytes = await Client.GetXlxsFileBytesAsync(query);

        using var memoryStream = new MemoryStream(fileBytes);
        using var streamRef = new DotNetStreamReference(stream: memoryStream);

        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "all_people.xlxs", streamRef);
    }
    
}